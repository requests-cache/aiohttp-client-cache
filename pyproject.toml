[tool.poetry]
name = "aiohttp-client-cache"
version="0.11.0"
description = "Persistent cache for aiohttp requests"
authors = ["Jordan Cook"]
license = "MIT License"
readme = "README.md"
homepage = "https://github.com/requests-cache/aiohttp-client-cache"
repository = "https://github.com/requests-cache/aiohttp-client-cache"
keywords = ["aiohttp", "async", "asyncio", "cache", "cache-backends", "client", "http",
            "persistence", "requests", "sqlite", "redis", "mongodb", "dynamodb", "dragonflydb"]
include = [
    { path = "*.md", format = "sdist" },
    { path = "*.yml", format = "sdist" },
    { path = "aiohttp_client_cache/py.typed" },
    { path = "docs", format = "sdist" },
    { path = "examples", format = "sdist" },
    { path = "test", format = "sdist" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    'Framework :: AsyncIO',
    'Framework :: aiohttp',
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

[tool.poetry.urls]
"Documentation" = "https://aiohttp-client-cache.readthedocs.io"

[tool.poetry.dependencies]
python          = "^3.8"
aiohttp         = "^3.8"
attrs           = ">=21.2"
itsdangerous    = ">=2.0"
url-normalize   = "^1.4"

# Optional backend dependencies
aioboto3        = {optional=true, version=">=9.0"}
aiobotocore     = {optional=true, version=">=2.0"}
aiofiles        = {optional=true, version=">=0.6.0"}
aiosqlite       = {optional=true, version=">=0.16"}
motor           = {optional=true, version=">=3.1"}
redis           = {optional=true, version=">=4.2"}

# Documentation dependencies needed for Readthedocs builds
furo                        = {optional=true, version="^2023.8"}
linkify-it-py               = {optional=true, version=">=2.0"}
markdown-it-py              = {optional=true, version=">=2.2"}
myst-parser                 = {optional=true, version=">=2.0"}
python-forge                = {optional=true, version="^18.6"}
sphinx                      = {optional=true, version="7.1.2"}
sphinx-automodapi           = {optional=true, version=">=0.15"}
sphinx-autodoc-typehints    = {optional=true, version="^1.23"}
sphinx-copybutton           = {optional=true, version="^0.3"}
sphinx-inline-tabs          = {optional=true, version=">=2023.4"}
sphinxcontrib-apidoc        = {optional=true, version=">=0.3"}

[tool.poetry.extras]
all         = ["aioboto3", "aiobotocore", "aiofiles", "aiosqlite", "motor", "redis"]
dynamodb    = ["aioboto3", "aiobotocore"]
filesystem  = ["aiofiles", "aiosqlite"]
mongodb     = ["motor"]
redis       = ["redis"]
sqlite      = ["aiosqlite"]
docs        = ["furo", "linkify-it-py", "markdown-it-py", "myst-parser", "python-forge",
               "sphinx", "sphinx-automodapi","sphinx-autodoc-typehints", "sphinx-copybutton",
               "sphinx-inline-tabs", "sphinxcontrib-apidoc"]

[tool.poetry.group.dev.dependencies]
# For unit + integration tests
async-timeout   = ">=4.0"
brotli          = ">=1.0"
pytest          = ">=6.2"
pytest-aiohttp  = "^0.3"
pytest-asyncio  = "^0.14"
pytest-clarity  = ">=1.0"
pytest-cov      = "^2.11"
pytest-xdist    = "^2.3"
Faker           = "^22.2.0"

# For convenience in local development; additional tools are managed by pre-commit
nox             = ">=2022.11"
nox-poetry      = "^0.8.6"
pre-commit      = ">=2.12"
sphinx-autobuild= ">=2021.3"
types-aiofiles  = ">=0.1.7"

[tool.poetry.group.test-server.dependencies]
flask = ">=2.0"
gunicorn = ">=21.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.html]
directory = 'test-reports'

[tool.coverage.run]
branch = true
source = ['aiohttp_client_cache']
omit = [
    'aiohttp_client_cache/__init__.py',
    'aiohttp_client_cache/backends/__init__.py',
    'aiohttp_client_cache/signatures.py',
]

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'if TYPE_CHECKING:',
]

[tool.mypy]
python_version = 3.8
ignore_missing_imports = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
show_error_codes = true
show_column_numbers = true
pretty = true
exclude = "dist|build"

[tool.ruff]
line-length = 100
output-format = 'grouped'
select = ['B', 'C4', 'C90', 'E', 'F', 'UP']
ignore = ['B023', 'B027']
target-version = 'py38'

[tool.ruff.format]
quote-style = 'single'

[tool.ruff.lint.isort]
known-first-party = ['test']

# Wrap lines to 100 chars, but don't error on unwrappable lines until 120 chars
[tool.ruff.lint.pycodestyle]
max-line-length = 120
